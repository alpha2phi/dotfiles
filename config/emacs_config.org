#+TITLE Emacs Configuration
#+PROPERTY header-args:emacs-lisp :mkdir yes
# #+PROPERTY header-args:emacs-lisp :tangle ./generated/init.el

* References

** [[https://org-babel.readthedocs.io/en/latest/header-args][Header Args]] 
** [[https://orgmode.org/guide/Export-Settings.html][Export Settings]] 
** [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][Babel Languages]]

* Main File

#+begin_src emacs-lisp :tangle ./generated/init.el

;;; base.el --- Base configuration
;;; Commentary:
;; Set up base configuration

;;; Code:
;; Set default font size
(defvar alpha2phi/default-font-size 160)
(set-face-attribute 'default nil :height alpha2phi/default-font-size)

;; Custom file
(defvar alpha2phi/custom-file (expand-file-name "custom.el" user-emacs-directory))

;; Package repositories
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

;; Install use-package
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)

; (defconst private-dir  (expand-file-name "private" user-emacs-directory))
; (defconst temp-dir (format "%s/cache" private-dir) "elisp temp directories")

;; Emacs customizations
(setq custom-file                        alpha2phi/custom-file
      make-backup-files                  nil
      display-line-numbers-type          'relative
      inhibit-startup-message            t
      use-package-always-ensure          t)

;; Keep buffers automatically up to date
(global-auto-revert-mode t)

;; Display line number
(global-display-line-numbers-mode)

;; Show matching parentheses
(show-paren-mode 1)

;; Need to load custom file to avoid being overwritten
;; more at https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html
(if (file-exists-p alpha2phi/custom-file)
  (load custom-file))

;; Delete trailing whitespace before save
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; helpful package
(use-package helpful)

;; command log
(use-package command-log-mode)

;; rainbow delimiters
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(provide 'base)
;;; base.el ends here

#+end_src


*  Base Configuraiton

#+begin_src emacs-lisp :tangle ./generated/elisp/base.el

;;; base.el --- Base configuration
;;; Commentary:
;; Set up base configuration

;;; Code:
;; Set default font size
(defvar alpha2phi/default-font-size 160)
(set-face-attribute 'default nil :height alpha2phi/default-font-size)

;; Custom file
(defvar alpha2phi/custom-file (expand-file-name "custom.el" user-emacs-directory))

;; Package repositories
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

;; Install use-package
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)

; (defconst private-dir  (expand-file-name "private" user-emacs-directory))
; (defconst temp-dir (format "%s/cache" private-dir) "elisp temp directories")

;; Emacs customizations
(setq custom-file                        alpha2phi/custom-file
      make-backup-files                  nil
      display-line-numbers-type          'relative
      inhibit-startup-message            t
      use-package-always-ensure          t)

;; Keep buffers automatically up to date
(global-auto-revert-mode t)

;; Display line number
(global-display-line-numbers-mode)

;; Show matching parentheses
(show-paren-mode 1)

;; Need to load custom file to avoid being overwritten
;; more at https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html
(if (file-exists-p alpha2phi/custom-file)
  (load custom-file))

;; Delete trailing whitespace before save
(add-hook 'before-save-hook 'delete-trailing-whitespace)

#+end_src

** Base Packages

#+begin_src emacs-lisp :tangle ./generated/elisp/base.el

;; helpful package
(use-package helpful)

;; command log
(use-package command-log-mode)

;; rainbow delimiters
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(provide 'base)
;;; base.el ends here

#+end_src


* Key Mappings

#+begin_src emacs-lisp :tangle ./generated/elisp/keymappings.el

#+end_src


* Org Mode

#+begin_src emacs-lisp :tangle ./generated/elisp/organize.el
;;; organize.el --- org mode configuration

;;; Commentary:
;; All org mode configurations should be here

;;; Code:
(defun alpha2phi/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))


;; Replace list hyphen with dot
(defun alpha2phi/org-font-setup ()
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
			     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
)

(use-package org
  :pin org
  :commands (org-capture org-agenda)
  :hook (org-mode . alpha2phi/org-mode-setup)
  :config
  (setq org-ellipsis " ▾")

  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-agenda-files
      '("~/workspace/personal/myself/notes/my_notes.org"
	"~/workspace/personal/myself/notes/my_notes_1.org"))

 (setq org-todo-keywords
    '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
      (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

 ;;(setq org-refile-targets
       ;;'(("Archive.org" :maxlevel . 1)
	 ;;("Tasks.org" :maxlevel . 1)))

 ;; Save Org buffers after refiling!
 (advice-add 'org-refile :after 'org-save-all-org-buffers)

 (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)
       ("@errand" . ?E)
       ("@home" . ?H)
       ("@work" . ?W)
       ("agenda" . ?a)
       ("planning" . ?p)
       ("publish" . ?P)
       ("batch" . ?b)
       ("note" . ?n)
       ("idea" . ?i)))
 
  (alpha2phi/org-font-setup)
)

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))


(defun alpha2phi/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
	visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . alpha2phi/org-mode-visual-fill))

;;  org-babel configuration
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (shell . t)
   (python . t)))

(setq org-confirm-babel-evaluate nil)

(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python :results output"))

;; Automatically tangle our Emacs.org config file when we save it
(defun alpha2phi/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/workspace/development/alpha2phi/dotfiles/config/emacs_config.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'alpha2phi/org-babel-tangle-config)))


(Provide 'organize)
;;; organize.el ends here

#+end_src


* Application Config

#+begin_src  conf :tangle generated/config :mkdirp yes

first_value=168

#+end_src


* NoWeb

**  Define the value

#+NAME: the-value
#+begin_src emacs-lisp
(+ 168 168)
#+end_src

#+RESULTS: the-value
: 336


** Use the value

#+begin_src conf :tangle generated/config :noweb yes

another_value=<<the-value()>>

#+end_src

