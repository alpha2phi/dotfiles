!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
;	plugin/telescope.vim	/^nnoremap <silent> ; :Telescope git_files<CR>$/;"	m
<C-Space>	plugin/compe.vim	/^inoremap <silent><expr> <C-Space> compe#complete()$/;"	m
<C-e>	plugin/compe.vim	/^inoremap <silent><expr> <C-e>     compe#close('<C-e>')$/;"	m
<CR>	plugin/compe.vim	/^inoremap <silent><expr> <CR>      compe#confirm('<CR>')$/;"	m
<Leader>bc	plugin/barbar.vim	/^nnoremap <silent>    <Leader>bc :BufferClose<CR>$/;"	m
<M-j>	plugin/compe.vim	/^inoremap <silent><expr> <M-j>     compe#scroll({ 'delta': +4 })$/;"	m
<M-k>	plugin/compe.vim	/^inoremap <silent><expr> <M-k>     compe#scroll({ 'delta': -4 })$/;"	m
<b	plugin/barbar.vim	/^nnoremap <silent>    <b :BufferMovePrevious<CR>$/;"	m
<f7>	plugin/utils.vim	/^nnoremap <f7> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'$/;"	m
<leader><leader>k	plugin/dasht.vim	/^nnoremap <leader><leader>k :Dasht!<Space>$/;"	m
<leader><leader>wk	plugin/dasht.vim	/^nnoremap <silent><leader><leader>wk :call Dasht(dasht#cursor_search_terms(), '!')<cr>$/;"	m
<leader>S<	plugin/telescope.vim	/^nmap <leader>S< :<C-u>RestoreSession<CR>$/;"	m
<leader>S>	plugin/telescope.vim	/^nmap <leader>S> :<C-u>SaveSession<CR>$/;"	m
<leader>Tn	plugin/floaterm.vim	/^nnoremap <leader>Tn :FloatermNew<cr>$/;"	m
<leader>e=	plugin/conjure.vim	/^nnoremap <leader>e= :ConjureShadowSelect app<cr>$/;"	m
<leader>eb	plugin/conjure.vim	/^nnoremap <leader>eb :ConjureEvalBuf<cr>$/;"	m
<leader>ec	plugin/conjure.vim	/^nnoremap <leader>ec :ConjureCljConnectPortFile<cr>$/;"	m
<leader>ee	plugin/conjure.vim	/^nnoremap <leader>ee :ConjureEval<cr>$/;"	m
<leader>f.	plugin/telescope.vim	/^nnoremap <silent> <leader>f. :lua require('config.telescope').search_dotfiles()<CR>$/;"	m
<leader>f??	plugin/telescope.vim	/^nnoremap <silent> <leader>f?? :Cheatsheet<cr>$/;"	m
<leader>f?e	plugin/telescope.vim	/^nnoremap <silent> <leader>f?e :CheatsheetEdit<cr>$/;"	m
<leader>f?s	plugin/telescope.vim	/^nnoremap <silent> <leader>f?s :Telescope ultisnips ultisnips<CR>$/;"	m
<leader>fDp	plugin/telescope.vim	/^nnoremap <silent> <leader>fDp :Telescope lsp_workspace_diagnostics<cr>$/;"	m
<leader>fG	plugin/telescope.vim	/^nnoremap <silent> <leader>fG :Telescope live_grep<cr>$/;"	m
<leader>fMp	plugin/telescope.vim	/^nnoremap <silent> <leader>fMp :Telescope vim_bookmarks all<CR>$/;"	m
<leader>fP	plugin/telescope.vim	/^nnoremap <silent> <leader>fP :lua require('config.telescope').switch_projects()<CR>$/;"	m
<leader>fS	plugin/telescope.vim	/^nnoremap <silent> <leader>fS :SearchSession$/;"	m
<leader>fSp	plugin/telescope.vim	/^nnoremap <silent> <leader>fSp :Telescope lsp_workspace_symbols<cr>$/;"	m
<leader>fa	plugin/telescope.vim	/^nnoremap <silent> <leader>fa :Telescope lsp_code_actions<cr>$/;"	m
<leader>fb	plugin/telescope.vim	/^nnoremap <silent> <leader>fb :Telescope buffers<cr>$/;"	m
<leader>fcs	plugin/telescope.vim	/^nnoremap <silent> <leader>fcs :Telescope colorscheme<cr>$/;"	m
<leader>fd	plugin/telescope.vim	/^nnoremap <silent> <leader>fd :Telescope lsp_document_diagnostics<cr>$/;"	m
<leader>fgCb	plugin/telescope.vim	/^nnoremap <silent> <leader>fgCb :Telescope git_bcommits<cr>$/;"	m
<leader>fgb	plugin/telescope.vim	/^nnoremap <silent> <leader>fgb :Telescope git_branches<cr>$/;"	m
<leader>fgc	plugin/telescope.vim	/^nnoremap <silent> <leader>fgc :Telescope git_commits<cr>$/;"	m
<leader>fghi	plugin/telescope.vim	/^nnoremap <silent> <leader>fghi :Telescope gh issues<cr>$/;"	m
<leader>fghpr	plugin/telescope.vim	/^nnoremap <silent> <leader>fghpr :Telescope gh pull_request<cr>$/;"	m
<leader>fgs	plugin/telescope.vim	/^nnoremap <silent> <leader>fgs :Telescope git_status<cr>$/;"	m
<leader>fgt	plugin/telescope.vim	/^nnoremap <silent> <leader>fgt :Telescope git_stash<cr>$/;"	m
<leader>fj*	plugin/telescope.vim	/^nnoremap <silent> <leader>fj* :Telescope lsp_references<cr>$/;"	m
<leader>fjd	plugin/telescope.vim	/^nnoremap <silent> <leader>fjd :Telescope lsp_definitions<cr>$/;"	m
<leader>fji	plugin/telescope.vim	/^nnoremap <silent> <leader>fji :Telescope lsp_implementations<cr>$/;"	m
<leader>fk	plugin/telescope.vim	/^nnoremap <silent> <leader>fk :Telescope help_tags<cr>$/;"	m
<leader>fm	plugin/telescope.vim	/^nnoremap <silent> <leader>fm :Telescope vim_bookmarks current_file<CR>$/;"	m
<leader>fn	plugin/telescope.vim	/^nnoremap <silent> <leader>fn :Telescope node_modules list<cr>$/;"	m
<leader>fp	plugin/telescope.vim	/^nnoremap <silent> <leader>fp :Telescope project<CR>$/;"	m
<leader>fq	plugin/telescope.vim	/^nnoremap <silent> <leader>fq :Telescope quickfix<cr>$/;"	m
<leader>fr	plugin/telescope.vim	/^nnoremap <silent> <leader>fr :Telescope registers<cr>$/;"	m
<leader>fs	plugin/telescope.vim	/^nnoremap <silent> <leader>fs :Telescope lsp_document_symbols<cr>$/;"	m
<leader>ftc	plugin/telescope.vim	/^nnoremap <silent> <leader>ftc :Telescope tags<cr>$/;"	m
<leader>ftd	plugin/todo-comments.vim	/^nnoremap <silent><leader>ftd :TodoTelescope<CR>$/;"	m
<leader>ftt	plugin/telescope.vim	/^nnoremap <silent> <leader>ftt :Telescope treesitter<cr>$/;"	m
<leader>fy	plugin/telescope.vim	/^nnoremap <silent> <leader>fy :Telescope symbols<CR>$/;"	m
<leader>fz	plugin/telescope.vim	/^nnoremap <silent> <leader>fz :Telescope current_buffer_fuzzy_find<cr>$/;"	m
<leader>jh	plugin/easymotion.vim	/^map <leader>jh <Plug>(easymotion-linebackward)$/;"	m
<leader>jj	plugin/easymotion.vim	/^map <leader>jj <Plug>(easymotion-j)$/;"	m
<leader>jk	plugin/easymotion.vim	/^map <leader>jk <Plug>(easymotion-k)$/;"	m
<leader>jl	plugin/easymotion.vim	/^map <leader>jl <Plug>(easymotion-lineforward)$/;"	m
<leader>js	plugin/easymotion.vim	/^nmap <leader>js <Plug>(easymotion-overwin-f)$/;"	m
<leader>k	plugin/dasht.vim	/^nnoremap <leader>k :Dasht<Space>$/;"	m
<leader>lm	plugin/bookmarks.vim	/^nmap <leader>lm <Plug>BookmarkLoad ~\/.config\/nvim\/bookmarks$/;"	m
<leader>rf	plugin/cljfmt.vim	/^nnoremap <leader>rf :CljFmt<CR>$/;"	m
<leader>tFc	plugin/ranger.vim	/^nnoremap <silent> <leader>tFc :RangerCurrentFile<CR>$/;"	m
<leader>tMa	plugin/bookmarks.vim	/^nmap <leader>tMa <Plug>BookmarkAnnotate$/;"	m
<leader>tc	plugin/context.vim	/^nnoremap <silent> <leader>tc :TSContextToggle<CR>$/;"	m
<leader>tf	plugin/ranger.vim	/^nnoremap <silent> <leader>tf :Ranger<CR>$/;"	m
<leader>tm	plugin/bookmarks.vim	/^nmap <leader>tm <Plug>BookmarkToggle$/;"	m
<leader>tr	plugin/repyl.vim	/^nnoremap <leader>tr :%Repl<cr>$/;"	m
<leader>tr	plugin/repyl.vim	/^vnoremap <leader>tr :'<,'>Repl<cr>$/;"	m
<leader>tt	plugin/floaterm.vim	/^inoremap <leader>tt <C-\\><C-n>:FloatermToggle<cr>$/;"	m
<leader>tt	plugin/floaterm.vim	/^nnoremap <leader>tt :FloatermToggle<CR>$/;"	m
<leader>wk	plugin/dasht.vim	/^nnoremap <silent><leader>wk :call Dasht(dasht#cursor_search_terms())<cr>$/;"	m
<leader>wm	plugin/bookmarks.vim	/^nmap <leader>wm <Plug>BookmarkSave ~\/.config\/nvim\/bookmarks$/;"	m
<leader>xm	plugin/bookmarks.vim	/^nmap <leader>xm <Plug>BookmarkClearAll$/;"	m
<space>?;	plugin/chadtree.vim	/^nnoremap <space>?; :CHADhelp keybind<cr>$/;"	m
<space>G	plugin/neogit.vim	/^nnoremap <space>G :Neogit<cr>$/;"	m
<space>t;	plugin/chadtree.vim	/^nnoremap <space>t; <cmd>CHADopen<cr>$/;"	m
<space>xqf	plugin/chadtree.vim	/^nnoremap <space>xqf <cmd>call setqflist([])<cr>$/;"	m
>b	plugin/barbar.vim	/^nnoremap <silent>    >b :BufferMoveNext<CR>$/;"	m
AddShebangPattern	ftdetect/ftdetect.vim	/^command! -nargs=* -bang AddShebangPattern$/;"	c
G.dump	lua/global.lua	/^function G.dump(o)$/;"	f
G.exists	lua/global.lua	/^function G.exists(file)$/;"	f
G.has_key	lua/global.lua	/^function G.has_key(tab, idx)$/;"	f
G.has_value	lua/global.lua	/^function G.has_value(tab, val)$/;"	f
G.isdir	lua/global.lua	/^function G.isdir(path)$/;"	f
G.load_variables	lua/global.lua	/^function G.load_variables()$/;"	f
G.readAll	lua/global.lua	/^function G.readAll(file)$/;"	f
Git.blameVirtText	lua/utils/git.lua	/^function Git.blameVirtText()$/;"	f
Git.check_workspace	lua/utils/git.lua	/^function Git.check_workspace()$/;"	f
Git.clearBlameVirtText	lua/utils/git.lua	/^function Git.clearBlameVirtText()$/;"	f
Git.get_branch	lua/utils/git.lua	/^function Git.get_branch()$/;"	f
Git.get_root_dir	lua/utils/git.lua	/^function Git.get_root_dir(path)$/;"	f
Git.run	lua/utils/git.lua	/^function Git.run()$/;"	f
M.Color	lua/statusline/colors.lua	/^function M.Color(val)$/;"	f
M.GalaxyBG	lua/statusline/utils.lua	/^function M.GalaxyBG(item, col)$/;"	f
M.GalaxyFG	lua/statusline/utils.lua	/^function M.GalaxyFG(item, col)$/;"	f
M.GalaxyHi	lua/statusline/utils.lua	/^function M.GalaxyHi(item, colorfg, colorbg)$/;"	f
M.GalaxyHiB	lua/statusline/utils.lua	/^function M.GalaxyHiB(item, colorfg, colorbg)$/;"	f
M.buffer_not_empty	lua/statusline/utils.lua	/^function M.buffer_not_empty()$/;"	f
M.checkwidth	lua/statusline/utils.lua	/^function M.checkwidth()$/;"	f
M.color	lua/statusline/colors.lua	/^function M.color(val)$/;"	f
M.current_line_percent	lua/statusline/providers/fileinfo.lua	/^function M.current_line_percent()$/;"	f
M.define_file_icon	lua/statusline/providers/fileinfo.lua	/^function M.define_file_icon()$/;"	f
M.diff_add	lua/statusline/providers/vcs.lua	/^function M.diff_add()$/;"	f
M.diff_modified	lua/statusline/providers/vcs.lua	/^function M.diff_modified()$/;"	f
M.diff_remove	lua/statusline/providers/vcs.lua	/^function M.diff_remove()$/;"	f
M.end_space	lua/statusline/providers/diagnostic.lua	/^function M.end_space()$/;"	f
M.filetype_seperator	lua/statusline/providers/fileinfo.lua	/^function M.filetype_seperator()$/;"	f
M.format_file_size	lua/statusline/providers/fileinfo.lua	/^function M.format_file_size(file)$/;"	f
M.get_buffer_filetype	lua/statusline/providers/buffer.lua	/^function M.get_buffer_filetype()$/;"	f
M.get_buffer_number	lua/statusline/providers/buffer.lua	/^function M.get_buffer_number()$/;"	f
M.get_buffer_type_icon	lua/statusline/providers/buffer.lua	/^function M.get_buffer_type_icon()$/;"	f
M.get_current_file_name	lua/statusline/providers/fileinfo.lua	/^function M.get_current_file_name()$/;"	f
M.get_diagnostic_error	lua/statusline/providers/diagnostic.lua	/^function M.get_diagnostic_error()$/;"	f
M.get_diagnostic_hint	lua/statusline/providers/diagnostic.lua	/^function M.get_diagnostic_hint()$/;"	f
M.get_diagnostic_info	lua/statusline/providers/diagnostic.lua	/^function M.get_diagnostic_info()$/;"	f
M.get_diagnostic_warn	lua/statusline/providers/diagnostic.lua	/^function M.get_diagnostic_warn()$/;"	f
M.get_file_encode	lua/statusline/providers/fileinfo.lua	/^function M.get_file_encode()$/;"	f
M.get_file_format	lua/statusline/providers/fileinfo.lua	/^function M.get_file_format()$/;"	f
M.get_file_icon	lua/statusline/providers/fileinfo.lua	/^function M.get_file_icon()$/;"	f
M.get_file_icon_color	lua/statusline/providers/fileinfo.lua	/^function M.get_file_icon_color()$/;"	f
M.get_file_size	lua/statusline/providers/fileinfo.lua	/^function M.get_file_size()$/;"	f
M.get_file_type	lua/statusline/providers/fileinfo.lua	/^function M.get_file_type()$/;"	f
M.get_git_branch_formatted	lua/statusline/providers/vcs.lua	/^function M.get_git_branch_formatted()$/;"	f
M.get_mode	lua/statusline/providers/vimode.lua	/^function M.get_mode()$/;"	f
M.git_branches 	lua/config/telescope.lua	/^M.git_branches = function()$/;"	f
M.has_diagnostics	lua/statusline/providers/diagnostic.lua	/^function M.has_diagnostics()$/;"	f
M.line_column	lua/statusline/providers/fileinfo.lua	/^function M.line_column()$/;"	f
M.scrollbar_instance	lua/statusline/providers/extension.lua	/^function M.scrollbar_instance(scroll_bar_chars)$/;"	f
M.search_dotfiles 	lua/config/telescope.lua	/^M.search_dotfiles = function()$/;"	f
M.seperator	lua/statusline/providers/diagnostic.lua	/^function M.seperator()$/;"	f
M.seperator	lua/statusline/providers/vcs.lua	/^function M.seperator()$/;"	f
M.seperator	lua/statusline/providers/vimode.lua	/^function M.seperator()$/;"	f
M.space	lua/statusline/utils.lua	/^function M.space()$/;"	f
M.switch_projects 	lua/config/telescope.lua	/^M.switch_projects = function()$/;"	f
M.vista_nearest	lua/statusline/providers/extension.lua	/^function M.vista_nearest(vista_icon)$/;"	f
TelescopeNoCompletion	plugin/compe.vim	/^augroup TelescopeNoCompletion$/;"	a
WinMove	lua/settings.lua	/^    function! WinMove(key)$/;"	f
[b	plugin/barbar.vim	/^nnoremap <silent>   [b :BufferPrevious<CR>$/;"	m
[m	plugin/bookmarks.vim	/^nmap [m <Plug>BookmarkPrev$/;"	m
[t	plugin/floaterm.vim	/^nnoremap [t :FloatermPrev<cr>$/;"	m
]b	plugin/barbar.vim	/^nnoremap <silent>   ]b :BufferNext<CR>$/;"	m
]m	plugin/bookmarks.vim	/^nmap ]m <Plug>BookmarkNext$/;"	m
]t	plugin/floaterm.vim	/^nnoremap ]t :FloatermNext<cr>$/;"	m
_G.s_tab_complete 	lua/config/compe.lua	/^_G.s_tab_complete = function()$/;"	f
_G.tab_complete 	lua/config/compe.lua	/^_G.tab_complete = function()$/;"	f
add_shebang_pattern	ftdetect/ftdetect.vim	/^function! s:add_shebang_pattern(filetype, pattern, ...) " {{{ add shebang pattern to filetype$/;"	f
attach_mappings 	lua/config/telescope.lua	/^            attach_mappings = function(prompt_bufnr, map)$/;"	f
attach_mappings 	lua/config/telescope.lua	/^    attach_mappings = function(_, map) $/;"	f
b:ale_fixers	ftplugin/javascript.vim	/^let b:ale_fixers = ['prettier', 'eslint']$/;"	v
colors_customization	plugin/colors.vim	/^augroup colors_customization$/;"	a
config 	lua/plugins.lua	/^        config = function() require 'statusline' end$/;"	f
config 	lua/plugins.lua	/^        config = function() require("trouble").setup {} end$/;"	f
config 	lua/plugins.lua	/^        config = function() require("which-key").setup {} end$/;"	f
config 	lua/plugins.lua	/^        config = function() require('gitsigns').setup({$/;"	f
config 	lua/plugins.lua	/^        config = function() require('neogit').setup() end$/;"	f
config 	lua/plugins.lua	/^        config = function()$/;"	f
config 	lua/plugins.lua	/^    config = function()$/;"	f
dap.adapters.go 	lua/dbg/go.lua	/^dap.adapters.go = function(callback, config)$/;"	f
detect_filetype	ftdetect/ftdetect.vim	/^function! s:detect_filetype(line, patterns) " {{{ try to detect current filetype$/;"	f
file_readonly	lua/statusline/providers/fileinfo.lua	/^local function file_readonly()$/;"	f
g:EasyMotion_smartcase	plugin/easymotion.vim	/^let g:EasyMotion_smartcase = 1$/;"	v
g:EasyMotion_startofline	plugin/easymotion.vim	/^let g:EasyMotion_startofline = 0 " keep cursor column when JK motion$/;"	v
g:UltiSnipsExpandTrigger	plugin/snippets.vim	/^let g:UltiSnipsExpandTrigger="<c-cr>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	plugin/snippets.vim	/^let g:UltiSnipsJumpBackwardTrigger="<a-k>"$/;"	v
g:UltiSnipsJumpForwardTrigger	plugin/snippets.vim	/^let g:UltiSnipsJumpForwardTrigger="<a-j>"$/;"	v
g:UltiSnipsListSnippets	plugin/snippets.vim	/^let g:UltiSnipsListSnippets="<c-tab>"$/;"	v
g:UltiSnipsSnippetDirectories	plugin/snippets.vim	/^let g:UltiSnipsSnippetDirectories=[$HOME."\/.local\/snippets"]$/;"	v
g:ale_fix_on_save	plugin/ale.vim	/^let g:ale_fix_on_save = 1$/;"	v
g:ale_linters	plugin/ale.vim	/^let g:ale_linters = {'clojure': ['clj-kondo'], 'javascript': ['eslint']}$/;"	v
g:bookmark_highlight_lines	plugin/bookmarks.vim	/^let g:bookmark_highlight_lines = 1$/;"	v
g:bookmark_no_default_key_mappings	plugin/bookmarks.vim	/^let g:bookmark_no_default_key_mappings = 1$/;"	v
g:bookmark_sign	plugin/bookmarks.vim	/^let g:bookmark_sign = '♥'$/;"	v
g:clj_fmt_config	plugin/cljfmt.vim	/^let g:clj_fmt_config = '{:indentation? true, :remove-surrounding-whitespace? true, :remove-trailing-whitespace? true, :remove-consecutive-blank-lines? false, :insert-missing-whitespace? true, :align-associative? false, :indents {#"^\\w" [[:inner 0]], #".*" [[:inner 0]]}}'$/;"	v
g:cljfmt_on_save	plugin/cljfmt.vim	/^let g:cljfmt_on_save = 1$/;"	v
g:conjure#log#hud#height	plugin/conjure.vim	/^let g:conjure#log#hud#height=0.6$/;"	v
g:conjure#log#hud#width	plugin/conjure.vim	/^let g:conjure#log#hud#width=0.9$/;"	v
g:conjure#log#wrap	plugin/conjure.vim	/^let g:conjure#log#wrap="true"$/;"	v
g:dasht_filetype_docsets	plugin/dasht.vim	/^let g:dasht_filetype_docsets = {}$/;"	v
g:dasht_filetype_docsets	plugin/dasht.vim	/^let g:dasht_filetype_docsets['clojure'] = ['javascript', 'html', 'svg']$/;"	v
g:dasht_results_window	plugin/dasht.vim	/^let g:dasht_results_window = 'tabnew'$/;"	v
g:doge_mapping	plugin/doge.vim	/^let g:doge_mapping = "<leader>D"$/;"	v
g:floaterm_height	plugin/floaterm.vim	/^let g:floaterm_height=0.9$/;"	v
g:floaterm_position	plugin/floaterm.vim	/^let g:floaterm_position='top'$/;"	v
g:floaterm_width	plugin/floaterm.vim	/^let g:floaterm_width=0.9$/;"	v
g:floaterm_winblend	plugin/floaterm.vim	/^let g:floaterm_winblend=10$/;"	v
g:floaterm_wintype	plugin/floaterm.vim	/^let g:floaterm_wintype='floating'$/;"	v
g:neoranger_opts	plugin/ranger.vim	/^let g:neoranger_opts='--cmd="set show_hidden true"'$/;"	v
g:neoranger_viewmode	plugin/ranger.vim	/^let g:neoranger_viewmode='miller'$/;"	v
g:reply_repls	plugin/repyl.vim	/^let g:reply_repls = {$/;"	v
g:shebang_enable_debug	ftdetect/ftdetect.vim	/^let g:shebang_enable_debug = 0$/;"	v
g:ultisnips_javascript	plugin/snippets.vim	/^let g:ultisnips_javascript = {$/;"	v
get_dir_contains	lua/utils/git.lua	/^local function get_dir_contains(path, dirname)$/;"	f
get_hunks_data	lua/statusline/providers/vcs.lua	/^local function get_hunks_data()$/;"	f
get_nvim_lsp_diagnostic	lua/statusline/providers/diagnostic.lua	/^local function get_nvim_lsp_diagnostic(diag_type)$/;"	f
has_git_dir	lua/utils/git.lua	/^    local function has_git_dir(dir)$/;"	f
has_git_file	lua/utils/git.lua	/^    local function has_git_file(dir)$/;"	f
has_specified_dir	lua/utils/git.lua	/^    local function has_specified_dir(path, specified_dir)$/;"	f
local b 	lua/statusline/providers/fileinfo.lua	/^  local b = (function()$/;"	f
local bangcheck 	lua/statusline/providers/fileinfo.lua	/^local bangcheck = function()$/;"	f
local check_back_space 	lua/config/compe.lua	/^local check_back_space = function()$/;"	f
local filetype 	lua/statusline/providers/fileinfo.lua	/^  local filetype = (function()$/;"	f
local has_vista,vista_info 	lua/statusline/providers/extension.lua	/^  local has_vista,vista_info = pcall(vim.fn.nvim_buf_get_var,0,'vista_nearest_method_or_function')$/;"	f
local n 	lua/statusline/providers/vimode.lua	/^    local n = (function()$/;"	f
local pybang 	lua/statusline/providers/fileinfo.lua	/^local pybang = function()$/;"	f
local sunrise 	lua/statusline/colors.lua	/^    local sunrise = (function()$/;"	f
local sunset 	lua/statusline/colors.lua	/^    local sunset = (function()$/;"	f
local t 	lua/config/compe.lua	/^local t = function(str)$/;"	f
os.capture	lua/statusline/providers/fileinfo.lua	/^function os.capture(cmd, raw)$/;"	f
pathname	lua/utils/git.lua	/^    local function pathname(path)$/;"	f
s:shebangs	ftdetect/ftdetect.vim	/^let s:shebangs = {}$/;"	v
setup 	lua/plugins.lua	/^        setup = function()$/;"	f
setup_colors	plugin/colors.vim	/^function! s:setup_colors() abort$/;"	f
shebang	ftdetect/ftdetect.vim	/^augroup shebang$/;"	a
shebang	ftdetect/ftdetect.vim	/^function! s:shebang() " {{{ set valid filetype based on shebang line$/;"	f
shellbang	lua/statusline/providers/fileinfo.lua	/^local function shellbang(shell)$/;"	f
uname 	lua/config/snippets.lua	/^    uname = function() return vim.loop.os_uname().sysname end;$/;"	f
up_one_level	lua/utils/git.lua	/^    local function up_one_level(path)$/;"	f
use {'romgrk/nvim-treesitter-context', config 	lua/plugins.lua	/^    use {'romgrk\/nvim-treesitter-context', config = function()$/;"	f
utils.create_augroups	lua/utils/init.lua	/^function utils.create_augroups(definitions)$/;"	f
utils.map	lua/utils/init.lua	/^function utils.map(mode, lhs, rhs, opts)$/;"	f
utils.opt	lua/utils/init.lua	/^function utils.opt(scope, key, value)$/;"	f
